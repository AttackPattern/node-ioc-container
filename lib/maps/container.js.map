{"version":3,"sources":["container.js"],"names":["Container","_this","this","_classCallCheck","Object","defineProperty","configurable","enumerable","writable","value","Target","factory","Error","concat","registrations","args","arguments","length","undefined","constructor","Function","prototype","bind","apply","_toConsumableArray","__ctorArgs","Array","fill","map","arg","index","name","resolve","_len","_key","property","description"],"mappings":"8WAAqBA,UACnB,SAAAA,IAAc,IAAAC,EAAAC,KAAAC,gBAAAD,KAAAF,GAAAI,OAAAC,eAAAH,KAAA,YAAAI,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,MAIH,SAACC,EAAQC,GAClB,GAAuB,mBAAZA,EACT,MAAM,IAAIC,MAAJ,2BAAAC,OAAqCH,EAArC,yBAGRT,EAAKa,cAAcJ,GAAUC,KATjBP,OAAAC,eAAAH,KAAA,WAAAI,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,MAAA,SAAAC,GAAA,IAAAK,EAAAC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,MAaZ,GAAIf,EAAKa,cAAcJ,GAbX,OAAAT,EAAAa,cAAAJ,GAAAT,GAAA,KAAAS,aAAAS,aAAA,MAAA,IAAAP,MAAA,4BAAAC,OAAAH,EAAA,MAKZ,OAAA,IAAAU,SAAAC,UAAAC,KAAAC,MAAIb,GAAJ,MAAAG,OAAAW,oBAAId,EAAmBe,YAAY,IAAAC,MAAAX,EAAAE,QAAA,GAAAU,KAAA,OAAAC,IAAA,SAAAC,EAAAC,GAAA,OAAAf,EAAAe,IAAAf,EAAAc,IAAAd,EAAA,OAAAc,QAAA,IAAAA,OAAA,EAAAA,EAAAE,OAAAF,GAAA5B,EAAA+B,QAAAH,YAJnC3B,KAAKY,kBAQL,SAAKA,SAAL,IAAA,IAAAmB,EAAAjB,UAAAC,OAAmBP,EAAnB,IAAAgB,MAAAO,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAmBxB,EAAnBwB,GAAAlB,UAAAkB,GACD,OAAA,SAAAxB,EAAAyB,EAAAC,GAVa1B,EAAAe,WAAAV","file":"../container.js","sourcesContent":["export default class Container {\n  constructor() {\n    this.registrations = {};\n  }\n\n  register = (Target, factory) => {\n    if (typeof factory !== 'function') {\n      throw new Error(`Container registration '${Target}' was not a function`);\n    }\n\n    this.registrations[Target] = factory;\n  }\n\n  resolve = (Target, args = {}) => {\n    if (this.registrations[Target]) {\n      return this.registrations[Target](this);\n    }\n\n    if (!(Target instanceof constructor)) {\n      throw new Error(`Registration not found: \"${Target}\"`);\n    }\n\n    return new Target(...(Target.__ctorArgs || new Array(args.length || 0).fill(null)).map((arg, index) => args[index] || args[arg] || args[arg?.name] || (arg && this.resolve(arg))));\n  }\n}\n\nexport function inject(...args) {\n  return (Target, property, description) => {\n    Target.__ctorArgs = args;\n  };\n}\n"]}